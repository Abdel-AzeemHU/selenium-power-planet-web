name: Web Automation Test Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Allows manual trigger

env:
  ALLURE_RESULTS_DIR: 'allure-results'
  ALLURE_REPORT_DIR: 'allure-report'
  TEST_SUITE: 'Power Plants Web Regression Test Suite'
  ENVIRONMENT: 'Testing'
  TESTER: 'Abdelazeem Hussein'
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  web-automation-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Web Test Repository
        uses: actions/checkout@v4
        with:
          path: web-tests

      - name: Checkout Power Plants Application
        uses: actions/checkout@v4
        with:
          repository: Abdel-AzeemHU/us-power-plants-js
          path: power-plants-app
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup Yarn
        run: |
          npm install -g yarn
          yarn --version

      - name: Install Dependencies
        working-directory: power-plants-app
        run: |
          # Install global packages first
          yarn global add nodemon ts-node typescript
          
          # Use the same make command that works locally
          make install

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Start Power Plants API
        working-directory: power-plants-app
        run: |
          # Start the API first in the background
          echo "Starting API with make api-start..."
          make api-start > api.log 2>&1 &
          echo $! > api.pid
          
          # Wait for API to be ready
          echo "Waiting for API to start..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:9000/api-docs 2>/dev/null; then
              echo "API is ready!"
              break
            fi
            echo "API not ready yet, waiting..."
            sleep 2
            timeout=$((timeout-2))
          done
          
          if [ $timeout -le 0 ]; then
            echo "API failed to start within timeout"
            echo "API logs:"
            cat api.log || echo "No api.log file found"
            cat api.pid | xargs kill -9 2>/dev/null || true
            exit 1
          fi

      - name: Start Power Plants Web Application
        working-directory: power-plants-app
        run: |
          echo "Checking if port 3000 is available..."
          netstat -tlnp | grep :3000 || echo "Port 3000 is free"
          
          # Set Node.js legacy OpenSSL provider for compatibility with older React apps
          export NODE_OPTIONS="--openssl-legacy-provider"
          
          # Now start the Web App in the background
          echo "Starting Web App with make web-start..."
          NODE_OPTIONS="--openssl-legacy-provider" make web-start > web.log 2>&1 &
          echo $! > web.pid
          
          # Show the first few lines of logs immediately
          sleep 5
          echo "Initial web app logs:"
          head -20 web.log || echo "No web.log content yet"
          
          # Wait for the Web App to be ready
          echo "Waiting for Web App to start..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if curl -f http://localhost:3000/ 2>/dev/null; then
              echo "Web App is ready!"
              break
            fi
            echo "Web App not ready yet, waiting..."
            echo "Current web app logs:"
            tail -10 web.log || echo "No recent logs"
            sleep 2
            timeout=$((timeout-2))
          done
          
          if [ $timeout -le 0 ]; then
            echo "Web App failed to start within timeout"
            echo "Web App logs:"
            cat web.log || echo "No web.log file found"
            # Kill both processes
            cat api.pid | xargs kill -9 2>/dev/null || true
            cat web.pid | xargs kill -9 2>/dev/null || true
            exit 1
          fi

      - name: Debug Web App Startup
        if: always()
        working-directory: power-plants-app
        run: |
          echo "=== Web App Logs ==="
          cat web.log || echo "No web.log file"
          echo "=== Process Status ==="
          ps aux | grep -E "(node|npm|yarn)" | grep -v grep || echo "No Node processes"
          echo "=== Port Status ==="
          ss -tlnp | grep :3000 || echo "Port 3000 not in use"
          echo "=== Web App Process Check ==="
          if [ -f web.pid ]; then
            pid=$(cat web.pid)
            echo "Web app PID: $pid"
            ps -p $pid || echo "Process $pid not running"
          else
            echo "No web.pid file found"
          fi

      - name: Build Maven Test Project
        working-directory: web-tests
        run: |
          # Debug Maven and Java versions
          echo "=== Environment Debug ==="
          mvn --version
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          
          # Check if maven wrapper exists
          if [ -f "mvnw" ]; then
            echo "Using Maven wrapper"
            ./mvnw clean install -DskipTests
          else
            echo "Using system Maven"
            mvn clean install -DskipTests
          fi

      - name: Run Web Tests
        working-directory: web-tests
        run: |
          # Start timing
          start_time=$(date +%s)
          
          # Run tests
          mvn clean test -Dsurefire.suiteXmlFiles=testng.xml \
            -Dallure.results.directory=${{ env.ALLURE_RESULTS_DIR }}
          
          # Calculate duration
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          hours=$((duration / 3600))
          minutes=$(((duration % 3600) / 60))
          seconds=$((duration % 60))
          formatted_duration=$(printf '%02dh:%02dm:%02ds' $hours $minutes $seconds)
          
          # Create reports directory and summary
          mkdir -p reports
          echo "duration=$formatted_duration" >> reports/test_summary.txt
          echo "environment=${{ env.ENVIRONMENT }}" >> reports/test_summary.txt
          echo "tester=${{ env.TESTER }}" >> reports/test_summary.txt
          echo "timestamp=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> reports/test_summary.txt
          
          echo "TEST_DURATION=$formatted_duration" >> $GITHUB_ENV

      - name: Generate Allure Report
        working-directory: web-tests
        if: always()
        run: |
          # Download and setup Allure
          curl -o allure-2.30.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.30.0/allure-2.30.0.tgz
          tar -zxvf allure-2.30.0.tgz
          sudo mv allure-2.30.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure
          
          # Generate report
          allure generate ${{ env.ALLURE_RESULTS_DIR }} -o ${{ env.ALLURE_REPORT_DIR }} --clean

      - name: Upload Allure Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-report
          path: web-tests/${{ env.ALLURE_REPORT_DIR }}
          retention-days: 30

      - name: Upload Extent Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: extent-report
          path: web-tests/Extent.html
          retention-days: 30

      - name: Upload Test Summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-summary
          path: web-tests/reports/test_summary.txt
          retention-days: 30

      - name: Generate Final Report
        working-directory: web-tests
        if: always()
        run: |
          # Make script executable if it exists
          if [ -f "generate_report.sh" ]; then
            chmod +x ./generate_report.sh
            ./generate_report.sh "${{ env.TEST_SUITE }}" "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          else
            echo "generate_report.sh not found, skipping final report generation"
          fi

      - name: Upload Final Report
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('web-tests/reports/final_report.html') != ''
        with:
          name: final-report
          path: web-tests/reports/final_report.html
          retention-days: 30

      - name: Comment Test Results on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const testDuration = process.env.TEST_DURATION || 'Unknown';
            const runUrl = `${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}`;
            
            const comment = `## 🌐 Web Test Results
            
            **Test Suite:** ${{ env.TEST_SUITE }}
            **Duration:** ${testDuration}
            **Environment:** ${{ env.ENVIRONMENT }}
            **Tester:** ${{ env.TESTER }}
            
            📊 [View Full Report](${runUrl})
            📋 [Download Artifacts](${runUrl})
            
            > Automated Web tests completed for commit ${{ github.sha }}`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Stop Power Plants Applications
        if: always()
        working-directory: power-plants-app
        run: |
          # Kill both API and Web App processes using the stored PIDs
          if [ -f api.pid ]; then
            cat api.pid | xargs kill -9 2>/dev/null || true
            rm api.pid
          fi
          if [ -f web.pid ]; then
            cat web.pid | xargs kill -9 2>/dev/null || true
            rm web.pid
          fi
          # Also kill any remaining processes that might be related
          pkill -f "make api-start" || true
          pkill -f "make web-start" || true